diff -ur mtd-utils-9f10713.orig/nandwrite.c mtd-utils-9f10713/nandwrite.c
--- mtd-utils-9f10713.orig/nandwrite.c	2014-04-07 13:01:36.000000000 +0200
+++ mtd-utils-9f10713/nandwrite.c	2014-09-09 16:54:09.000000000 +0200
@@ -49,6 +49,8 @@
 "Writes to the specified MTD device.\n"
 "\n"
 "  -a, --autoplace         Use auto OOB layout\n"
+"  -e, --skipemptypage     Skip empty page writing (depends on --oob)\n"
+"  -i, --skipinputbad      Skip input bad blocks (depends on --oob)\n"
 "  -m, --markbad           Mark blocks bad if write fails\n"
 "  -n, --noecc             Write without ecc\n"
 "  -N, --noskipbad         Write without bad block skipping\n"
@@ -93,6 +95,8 @@
 static bool		markbad = false;
 static bool		noecc = false;
 static bool		autoplace = false;
+static bool		skipemptypage = false;
+static bool		skipinputbad = false;
 static bool		noskipbad = false;
 static bool		pad = false;
 static int		blockalign = 1; /* default to using actual block size */
@@ -120,6 +124,8 @@
 			{"quiet", no_argument, 0, 'q'},
 			{"start", required_argument, 0, 's'},
 			{"autoplace", no_argument, 0, 'a'},
+			{"skipemptypage", no_argument, 0, 'e'},
+			{"skipinputbad", no_argument, 0, 'i'},
 			{0, 0, 0, 0},
 		};
 
@@ -173,6 +179,12 @@
 		case 'a':
 			autoplace = true;
 			break;
+		case 'e':
+			skipemptypage = true;
+			break;
+		case 'i':
+			skipinputbad = true;
+			break;
 		case 'h':
 			display_help(EXIT_SUCCESS);
 			break;
@@ -226,6 +238,12 @@
 		memset(buffer, kEraseByte, size);
 }
 
+static int count_bits(const unsigned char byte)
+{
+	static const unsigned char cbits[16] = { 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4 };
+	return cbits[byte & 0xf] + cbits[byte >> 4];
+}
+
 /*
  * Main program
  */
@@ -252,6 +270,7 @@
 	libmtd_t mtd_desc;
 	int ebsize_aligned;
 	uint8_t write_mode;
+	bool empty_page = false;
 
 	process_options(argc, argv);
 
@@ -513,17 +532,54 @@
 					/* No more bytes - we are done after writing the remaining bytes */
 					imglen = 0;
 				}
+
+				/* Skip input bad blocks if requested */
+				if (skipinputbad && (*(oobbuf) != 0xFF || *(oobbuf + 1) != 0xFF))
+				{
+					readlen = (mtd.min_io_size + mtd.oob_size) * (mtd.eb_size / mtd.min_io_size - 1);
+					tinycnt = 0;
+
+					printf("Skipping input bad block\n");
+
+					while (tinycnt < readlen) {
+						cnt = read(ifd, filebuf + tinycnt, readlen - tinycnt);
+						if (cnt == 0) { /* EOF */
+							break;
+						} else if (cnt < 0) {
+							perror("File I/O error on input");
+							goto closeall;
+						}
+						tinycnt += cnt;
+					}
+
+					filebuf_len = 0;
+					continue;
+				}
+
+				/* Check for empty page */
+				int cbits = count_bits(*(oobbuf + 2)) + count_bits(*(oobbuf + 3)) +
+							count_bits(*(oobbuf + 4)) + count_bits(*(oobbuf + 5)) +
+							count_bits(*(oobbuf + 6)) + count_bits(*(oobbuf + 7));
+
+				if (cbits > 24)
+					empty_page = true;
+				else
+					empty_page = false;
 			}
 		}
 
-		/* Write out data */
-		ret = mtd_write(mtd_desc, &mtd, fd, mtdoffset / mtd.eb_size,
-				mtdoffset % mtd.eb_size,
-				onlyoob ? NULL : writebuf,
-				onlyoob ? 0 : mtd.min_io_size,
-				writeoob ? oobbuf : NULL,
-				writeoob ? mtd.oob_size : 0,
-				write_mode);
+		if (!skipemptypage || !empty_page)
+		{
+			/* Write out data */
+			ret = mtd_write(mtd_desc, &mtd, fd, mtdoffset / mtd.eb_size,
+					mtdoffset % mtd.eb_size,
+					onlyoob ? NULL : writebuf,
+					onlyoob ? 0 : mtd.min_io_size,
+					writeoob ? oobbuf : NULL,
+					writeoob ? mtd.oob_size : 0,
+					write_mode);
+		}
+
 		if (ret) {
 			long long i;
 			if (errno != EIO) {
